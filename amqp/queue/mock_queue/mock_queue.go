// Code generated by MockGen. DO NOT EDIT.
// Source: amqp/queue/queue.go

// Package mock_queue is a generated GoMock package.
package mock_queue

import (
	gomock "github.com/golang/mock/gomock"
	amqp "github.com/streadway/amqp"
	reflect "reflect"
)

// MockAMQPDelivery is a mock of AMQPDelivery interface
type MockAMQPDelivery struct {
	ctrl     *gomock.Controller
	recorder *MockAMQPDeliveryMockRecorder
}

// MockAMQPDeliveryMockRecorder is the mock recorder for MockAMQPDelivery
type MockAMQPDeliveryMockRecorder struct {
	mock *MockAMQPDelivery
}

// NewMockAMQPDelivery creates a new mock instance
func NewMockAMQPDelivery(ctrl *gomock.Controller) *MockAMQPDelivery {
	mock := &MockAMQPDelivery{ctrl: ctrl}
	mock.recorder = &MockAMQPDeliveryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAMQPDelivery) EXPECT() *MockAMQPDeliveryMockRecorder {
	return m.recorder
}

// Payload mocks base method
func (m *MockAMQPDelivery) Payload() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Payload")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Payload indicates an expected call of Payload
func (mr *MockAMQPDeliveryMockRecorder) Payload() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Payload", reflect.TypeOf((*MockAMQPDelivery)(nil).Payload))
}

// Ack mocks base method
func (m *MockAMQPDelivery) Ack(arg0 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ack", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ack indicates an expected call of Ack
func (mr *MockAMQPDeliveryMockRecorder) Ack(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ack", reflect.TypeOf((*MockAMQPDelivery)(nil).Ack), arg0)
}

// Nack mocks base method
func (m *MockAMQPDelivery) Nack(arg0, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Nack", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Nack indicates an expected call of Nack
func (mr *MockAMQPDeliveryMockRecorder) Nack(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Nack", reflect.TypeOf((*MockAMQPDelivery)(nil).Nack), arg0, arg1)
}

// SetHeader mocks base method
func (m *MockAMQPDelivery) SetHeader(key string, value interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader
func (mr *MockAMQPDeliveryMockRecorder) SetHeader(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockAMQPDelivery)(nil).SetHeader), key, value)
}

// GetHeader mocks base method
func (m *MockAMQPDelivery) GetHeader(key string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeader", key)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHeader indicates an expected call of GetHeader
func (mr *MockAMQPDeliveryMockRecorder) GetHeader(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeader", reflect.TypeOf((*MockAMQPDelivery)(nil).GetHeader), key)
}

// MockAMQPConsumer is a mock of AMQPConsumer interface
type MockAMQPConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockAMQPConsumerMockRecorder
}

// MockAMQPConsumerMockRecorder is the mock recorder for MockAMQPConsumer
type MockAMQPConsumerMockRecorder struct {
	mock *MockAMQPConsumer
}

// NewMockAMQPConsumer creates a new mock instance
func NewMockAMQPConsumer(ctrl *gomock.Controller) *MockAMQPConsumer {
	mock := &MockAMQPConsumer{ctrl: ctrl}
	mock.recorder = &MockAMQPConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAMQPConsumer) EXPECT() *MockAMQPConsumerMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockAMQPConsumer) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockAMQPConsumerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockAMQPConsumer)(nil).Start))
}

// Stop mocks base method
func (m *MockAMQPConsumer) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
func (mr *MockAMQPConsumerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockAMQPConsumer)(nil).Stop))
}

// MockAMQPConsumerChannel is a mock of AMQPConsumerChannel interface
type MockAMQPConsumerChannel struct {
	ctrl     *gomock.Controller
	recorder *MockAMQPConsumerChannelMockRecorder
}

// MockAMQPConsumerChannelMockRecorder is the mock recorder for MockAMQPConsumerChannel
type MockAMQPConsumerChannelMockRecorder struct {
	mock *MockAMQPConsumerChannel
}

// NewMockAMQPConsumerChannel creates a new mock instance
func NewMockAMQPConsumerChannel(ctrl *gomock.Controller) *MockAMQPConsumerChannel {
	mock := &MockAMQPConsumerChannel{ctrl: ctrl}
	mock.recorder = &MockAMQPConsumerChannelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAMQPConsumerChannel) EXPECT() *MockAMQPConsumerChannelMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockAMQPConsumerChannel) Start() (<-chan amqp.Delivery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(<-chan amqp.Delivery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Start indicates an expected call of Start
func (mr *MockAMQPConsumerChannelMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockAMQPConsumerChannel)(nil).Start))
}

// Stop mocks base method
func (m *MockAMQPConsumerChannel) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
func (mr *MockAMQPConsumerChannelMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockAMQPConsumerChannel)(nil).Stop))
}
